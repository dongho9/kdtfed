1.SSR : 
- Server Side Rendering
- Client가 요청할 때마다 Server가 요청을 받은 페이지를 매번 새롭게 전달해주는 방식
- 이미지 용량 : 저용량

2.CSR :
- React.js
- Client Side Rendering
- Client가 어떤 페이지를 요청
- 해당 메인페이지 뿐만 아니라 메인페이지 안에 연결되어 있는 모든 페이지의 소스 정보를 한 번에 Server가 Client에게 전달합니다
- 다른 페이지로 이동할 때, 깜박거림의 불펴함이 해소, 페이지 이동 시, 매우 빠르게 이동합니다

3.SPA : 
- single-page-application
- 1개의 html > 복수의 JS 연결해서 여러개의 페이지를 구현할 수 있도록 만든 앱 설계 방식의 페이지
- page routing

4.React.js
- 사용자 입장에서 특정 웹사이트의 메인페이지를 처음 열어볼 때, 만약 메인페이지 안에 고용량의 동영상 혹은 이미지가 들어있다면 => 해당 메인페이지를 로딩해오는데, 굉장히 더디게 출력

- Client가 최초에 Server에게 받아와야하는 데이터들이 굉장히 용량이 큰 경우!!!

- TTI : Time To Interval
=> Client가 Server에게  페이지를 요청한 이후에 FCP 단계까지 도달하는데 걸리는 인터벌 시간

- FCP가 비효율적이다!!!
=> First Contenful Paint
=> Client가 Server로부터 요청한 데이터를 브라우저에 최초로 출력시킨 상태 

5.SSR 회귀
- Server가 Client의 요청에 따라서 Data를 전달하는 방식은 예전과 다를바 없음
- Pre-Rendering (*사전렌더링)

https://www.netlify.com/


1.Google > Chrome
- git 검색 > git 다운로드 설치
(*64-bit Git for Windows Setup.)

2.cmd > 관리자권한 접속
- git -v
- git config --list

3.로컬 컴퓨터 > git소유주 정보 등록
- git config --global user.name "Divjason"
- git config --global user.email "sejinpark@tcocs.com"
- git config --list (*소유주 정보 조회)

4.git-hub > 배포하고자 하는 배포전용 repository 생성

> 본인들의 git-hub 메이크업
> 포트폴리오 홈페이지 > 개별 포트폴리오 작업물 소개!!!
https://github.com/Divjason/profile-250109

mobile-profile
git init 명령어 : 현재 폴더에서 staging area // 버전관리를 해당 폴더를 기준으로 하겠다!!!!

git init

git remote add origin https://github.com/Divjason/profile-250109.git

git remote -v

git add .

git status

git commit -m "firstCommit"

git push origin master

https://search.naver.com/search.naver?where=nexearch&sm=top_hty&fbm=0&ie=utf8&query=%EB%82%98%EC%9D%B4%ED%82%A4

transition : 전환속성
> A가 B로 변경되는 순간을 제어할 수 있도록 하는 속성
> 얼만큼 천천히 || 빨리 || 어느 정도의 시간동안... || 어느 정도의 시간을 기다렸다가... || 어느 정도의 가속도로 || 어떤 감속으로...

cubic-bezier

transition-duration : 얼마의 시간동안 상태변화를 진행되도록 할 것 인가!
transition-delay : 얼마의 지연 후 상태변화를 진행하게 할 것 인가!
transition-timing-function : 어떤 가.감속을 적용할 것 인가!
transition-property : 어떤 속성 요소에 상태변화를 적용할 것 인가!!
